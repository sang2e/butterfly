/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 pin.glb 
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

let vrid;

function Pin_1() {
  const pinRef = useRef();
  const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  // 마우스 호버 커서 변경
  const [hovered, setHovered] = useState(false);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  // 핀 로테이션
  useFrame(() => {
    pinRef.current.rotation.y -= 0.015;
  });

  return (
    <mesh
      ref={pinRef}
      name="pin_1"
      geometry={nodes.pin.geometry}
      material={materials["s-red"]}
      position={[-8.7, 1.21, 3.65]}
      scale={1.5}
      // position={[-8.7, 1, 3.65]}
      // scale={1}
      // userData={{ vrid: "DS-00-01" }}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => (e.stopPropagation(), setHovered(false))}
      onClick={(e) => (
        e.stopPropagation(),
        // vrid data 할당
        // window.parent.postMessage({vrid: 'DS-00-01'}, 'https://fgoc-www.kvrcms.com/')
        window.parent.postMessage({vrid: 'DS-00-01'})
        // (vrid = pinRef.current.userData.vrid),
        // console.log(vrid)
      )}
    />
  );
}

function Pin_2() {
  const pinRef = useRef();
  const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  // 마우스 호버 커서 변경
  const [hovered, setHovered] = useState(false);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  // 핀 로테이션
  useFrame(() => {
    pinRef.current.rotation.y -= 0.015;
  });

  return (
    <mesh
      ref={pinRef}
      name="pin_2"
      geometry={nodes.pin.geometry}
      material={materials["s-red"]}
      position={[-7.3, 1.65, 2.8]}
      scale={1.5}
      // position={[-7.3, 1.65, 2.8]}
      // scale={1}
      // userData={{ vrid: "DS-F02-01" }}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => (e.stopPropagation(), setHovered(false))}
      onClick={(e) => (
        e.stopPropagation(),
        // vrid data 할당
        // window.parent.postMessage({vrid: 'DS-F02-01'}, 'https://fgoc-www.kvrcms.com/')
        window.parent.postMessage({vrid: 'DS-F02-01'})
        // (vrid = pinRef.current.userData.vrid),
        // console.log(vrid)
      )}
    />
  );
}

function Pin_3() {
  const pinRef = useRef();
  const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  // 마우스 호버 커서 변경
  const [hovered, setHovered] = useState(false);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  // 핀 로테이션
  useFrame(() => {
    pinRef.current.rotation.y -= 0.015;
  });

  return (
    <mesh
      ref={pinRef}
      name="pin_3"
      geometry={nodes.pin.geometry}
      material={materials["s-red"]}
      position={[1.5, 0.78, 5]}
      scale={1.5}
      // position={[1.5, 0.7, 5]}
      // scale={1}
      // userData={{ vrid: "E1-00-01" }}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => (e.stopPropagation(), setHovered(false))}
      onClick={(e) => (
        e.stopPropagation(),
        // vrid data 할당
        // window.parent.postMessage({vrid: 'E1-00-01'}, 'https://fgoc-www.kvrcms.com/')
        window.parent.postMessage({vrid: 'E1-00-01'})
        // (vrid = pinRef.current.userData.vrid),
        // console.log(vrid)
      )}
    />
  );
}

function Pin_4() {
  const pinRef = useRef();
  const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  // 마우스 호버 커서 변경
  const [hovered, setHovered] = useState(false);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  // 핀 로테이션
  useFrame(() => {
    pinRef.current.rotation.y -= 0.015;
  });

  return (
    <mesh
      ref={pinRef}
      name="pin_4"
      geometry={nodes.pin.geometry}
      material={materials["s-red"]}
      position={[4.5, 0.78, 6]}
      scale={1.5}
      // position={[4.5, 0.7, 6]}
      // scale={1}
      // userData={{ vrid: "E2-00-01" }}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => (e.stopPropagation(), setHovered(false))}
      onClick={(e) => (
        e.stopPropagation(),
        // vrid data 할당
        // window.parent.postMessage({vrid: 'E2-00-01'}, 'https://fgoc-www.kvrcms.com/')
        window.parent.postMessage({vrid: 'E2-00-01'})
        // (vrid = pinRef.current.userData.vrid),
        // console.log(vrid)
      )}
    />
  );
}

function Pin_5() {
  const pinRef = useRef();
  const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  // 마우스 호버 커서 변경
  const [hovered, setHovered] = useState(false);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  // 핀 로테이션
  useFrame(() => {
    pinRef.current.rotation.y -= 0.015;
  });

  return (
    <mesh
      ref={pinRef}
      name="pin_5"
      geometry={nodes.pin.geometry}
      material={materials["s-red"]}
      position={[7.2, 0.78, 0.25]}
      scale={1.5}
      // position={[7.2, 0.7, 0.25]}
      // scale={1}
      // userData={{ vrid: "VS-00-01" }}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => (e.stopPropagation(), setHovered(false))}
      onClick={(e) => (
        e.stopPropagation(),
        // vrid data 할당
        // window.parent.postMessage({vrid: 'VS-00-01'}, 'https://fgoc-www.kvrcms.com/')
        window.parent.postMessage({vrid: 'VS-00-01'})
        // (vrid = pinRef.current.userData.vrid),
        // console.log(vrid)
      )}
    />
  );
}

function Pin_6() {
  const pinRef = useRef();
  const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  // 마우스 호버 커서 변경
  const [hovered, setHovered] = useState(false);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  // 핀 로테이션
  useFrame(() => {
    pinRef.current.rotation.y -= 0.015;
  });

  return (
    <mesh
      ref={pinRef}
      name="pin_6"
      geometry={nodes.pin.geometry}
      material={materials["s-red"]}
      position={[7.2, 0.78, -2.3]}
      scale={1.5}
      // position={[7.2, 0.7, -2.3]}
      // scale={1}
      // userData={{ vrid: "GL-00-01" }}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => (e.stopPropagation(), setHovered(false))}
      onClick={(e) => (
        e.stopPropagation(),
        // vrid data 할당
        // window.parent.postMessage({vrid: 'GL-00-01'}, 'https://fgoc-www.kvrcms.com/')
        window.parent.postMessage({vrid: 'GL-00-01'})
        // (vrid = pinRef.current.userData.vrid),
        // console.log(vrid)
      )}
    />
  );
}

function Pin_7() {
  const pinRef = useRef();
  const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  // 마우스 호버 커서 변경
  const [hovered, setHovered] = useState(false);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  // 핀 로테이션
  useFrame(() => {
    pinRef.current.rotation.y -= 0.015;
  });

  return (
    <mesh
      ref={pinRef}
      name="pin_7"
      geometry={nodes.pin.geometry}
      material={materials["s-red"]}
      position={[6.5, 0.78, -4.65]}
      scale={1.5}
      // position={[6.5, 0.7, -4.65]}
      // scale={1}
      // userData={{ vrid: "YS-00-02" }}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => (e.stopPropagation(), setHovered(false))}
      onClick={(e) => (
        e.stopPropagation(),
        // vrid data 할당
        // window.parent.postMessage({vrid: 'YS-00-02'}, 'https://fgoc-www.kvrcms.com/')
        window.parent.postMessage({vrid: 'YS-00-02'})
        // (vrid = pinRef.current.userData.vrid),
        // console.log(vrid)
      )}
    />
  );
}

export function Pins(props) {
  const group = useRef();
  // const { nodes, materials } = useGLTF('./models/butterfly/pin.glb');

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        {/* <mesh
          name="pin"
          geometry={nodes.pin.geometry}
          material={materials["s-red"]}
          position={[-0.009, 0.001, 0.004]}
          scale={0.001}
        /> */}
        <Pin_1 />
        <Pin_2 />
        <Pin_3 />
        <Pin_4 />
        <Pin_5 />
        <Pin_6 />
        <Pin_7 />
      </group>
    </group>
  );
}

useGLTF.preload('./models/butterfly/pin.glb');
